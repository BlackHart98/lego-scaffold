#!/usr/bin/env python3

import os
import sys
import typing as t
import subprocess
import tempfile
import pathlib as p
import shutil
import logging


# A very simple lego-rag project initializer

SCAFFOLD = "https://github.com/BlackHart98/lego-rag.git"

class ErrorLog:
    INVALID_ARGS = """Usage: lego-scaffold init <project_name>"""
    INVALID_PROJECT_NAME = """Error: Invalid project path name <project_path>, project should neither have leading non-alphabet nor contain space"""


class Command:
    INIT = ["init"]
    HELP = ["help"]


def init_project(project_path: str) -> int:
    _project_path = p.Path(project_path)
    if _project_path.absolute().exists():
        logging.error(f"Path `{_project_path}` aka `{_project_path.absolute().as_uri()}` already exists.")
        exit(code=1)
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            logging.info("INFO: Cloning scaffold...")
            git_clone = subprocess.run(["git", "clone", f"{SCAFFOLD}", f"{temp_dir}"], )
            if git_clone.stderr:
                logging.error(f"ERROR: Cloning scaffold failed due to {git_clone.stderr}.")
                exit(code=1)
            else:
                logging.info("INFO: Cloned scaffold successfully.")
                if shutil.rmtree.avoids_symlink_attacks:
                    shutil.rmtree(p.Path(temp_dir).joinpath(".git"))
                copy_content = shutil.copytree(temp_dir, _project_path)
    except Exception as e:
        logging.error(f"Failed created new project due to {e}")
        exit(code=1)  
    logging.info(f"Project create successfully, path: {_project_path.absolute().as_uri()}.") 
    return 0



def main(argv: t.List[str]) -> int:
    arglen = len(argv) - 1
    if arglen == 0 or arglen > 2:
        logging.error(ErrorLog.INVALID_ARGS)
        exit(code=1)
    args = sys.argv[1:]
    if args[0] in Command.INIT:
        if len(args) != 2:
            logging.error(ErrorLog.INVALID_ARGS)
            exit(code=1)
        init_project(args[1])
        return 0
    elif args[0] in Command.HELP:
        logging.errort(ErrorLog.INVALID_ARGS)
        return 0
    else:
        logging.error(ErrorLog.INVALID_ARGS)
        exit(code=1)




if __name__ == "__main__":
    main(sys.argv)

